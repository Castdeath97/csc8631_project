(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled[,1], type="response")
plasma_data_scaled[,1]
## Extract response
ESR = plasma_data[,3]
## Extract predictors
X1_raw =  plasma_data[,1]
## Standarise (scale) predictors
X1 = scale(as.matrix(X1_raw))
## Form scaled data frame
plasma_data_scaled = data.frame(ESR, X1)
## Fit and summarise model
lr_fit = glm(ESR ~ ., data=plasma_data_scaled, family="binomial")
summary(lr_fit)
lr_fit_red = glm(ESR ~ ., data=plasma_data_scaled[-2], family="binomial")
summary(lr_fit_red)
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled[,1], type="response")
## Extract response
y = plasma_data[,3]
## Extract predictors
X1_raw =  plasma_data[,1:2]
## Standarise (scale) predictors
X1 = scale(as.matrix(X1_raw))
## Form scaled data frame
plasma_data_scaled = data.frame(y, X1)
## Fit and summarise model
lr_fit = glm(y ~ ., data=plasma_data_scaled, family="binomial")
summary(lr_fit)
lr_fit_red = glm(y ~ ., data=plasma_data_scaled[-2], family="binomial")
summary(lr_fit_red)
lr_fit_red$coefficients
## Extract predictors
X1_raw =  plasma_data[,1:2]
## Standarise (scale) predictors
X1 = scale(as.matrix(X1_raw))
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled$fibrinogen, type="response")
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled, type="response")
## Compute fitted (i.e. predicted) values:
yhat = ifelse(phat > 0.5, 1, 0)
## Calculate confusion matrix:
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat))
## Extract response
y = plasma_data[,3]
## Extract predictors
X1_raw =  plasma_data[,1:2]
## Standarise (scale) predictors
X1 = scale(as.matrix(X1_raw))
## Form scaled data frame
plasma_data_scaled = data.frame(y, X1)
## Fit and summarise model
lr_fit = glm(y ~ ., data=plasma_data_scaled, family="binomial")
summary(lr_fit)
plasma_data_scaled
lr_fit_red = glm(y ~ ., data=plasma_data_scaled[-3], family="binomial")
summary(lr_fit_red)
anova(lr_fit_red, lr_fit, test="Chisq")
lr_fit_red$coefficients
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled, type="response")
## Compute fitted (i.e. predicted) values:
yhat = ifelse(phat > 0.5, 1, 0)
## Calculate confusion matrix:
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat))
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled[,2], type="response")
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled, type="response")
## Compute fitted (i.e. predicted) values:
yhat = ifelse(phat > 0.5, 1, 0)
## Calculate confusion matrix:
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat))
1 - sum(diag(confusion)) / sum(confusion)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=chapman_data[train_set,], family="binomial")
train_set
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[!train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[!train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
plasma_data_scaled$y[!train_set] == yhat_test
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[!train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
plasma_data_scaled$y[!train_set]
plasma_data_scaled$y[train_set]
plasma_data_scaled$y[!train_set]
plasma_data_scaled$y
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[=!train_set,], type="response")
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=which(plasma_data_scaled != trainset), type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
which(plasma_data_scaled != trainset)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=which(plasma_data_scaled != trainset), type="response")
which(plasma_data_scaled != trainset)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=which(plasma_data_scaled != train_set), type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
which(plasma_data_scaled != train_set)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[!train_set] == yhat_test)
plasma_data_scaled[-train_set,]
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(data=plasma_data_scaled$y[-train_set] == yhat_test)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
lr_train = glm(y ~ ., data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data:
phat_test = predict(lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
lr_fit_red = glm(y ~ fibrinogen, data=plasma_data_scaled, family="binomial")
summary(lr_fit_red)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
red+lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
plasma_data_scaled
# LDA analysis
## Fit train data
lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda, plasma_data_scaled[-train_set,])
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$class[-train_set] == yhat_test)
# QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$class[-train_set] == yhat_test)
# LDA analysis
## Fit train data
(lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,]))
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$class[-train_set] == yhat_test)
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
lda_test
lda_test$class
plasma_data_scaled$class[-train_set]
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
qda_train
qda_train$y
qda_train$Class
qda_train$class
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
qda_test$class
# QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
clear
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
yhat_test
1 - sum(diag(confusion)) / sum(confusion)
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
yhat_test
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
# QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
plasma_data_scaled$y[-train_set] == yhat_test
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
plasma_data_scaled$y[-train_set] == yhat_test
plasma_data_scaled$y[-train_set]
plasma_data_scaled$[-train_set]
plasma_data_scaled[-train_set]
plasma_data_scaled$globulin[-train_set]
plasma_data_scaled$globulin[train_set]
QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat))
## QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat_test))
(confusion = table(Observed=plasma_data_scaled$y[-train_set], Predicted=yhat_test))
plot(yhat)
plot(yhat_test)
## Fit logistic regression model to training data:
train_set = c(1:13, 27:29)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test2 = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_tes2t)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test2 = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test2)
(center = attr(X1, "scaled:center"))
(scale = attr(X1, "scaled:scale"))
## Compute predicted probabilities (scaled):
phat = predict(lr_fit_red, plasma_data_scaled, type="response")
## Compute fitted (i.e. predicted) values:
yhat = ifelse(phat > 0.5, 1, 0)
## Calculate confusion matrix:
(confusion = table(Observed=plasma_data_scaled$y, Predicted=yhat))
1 - sum(diag(confusion)) / sum(confusion))
1 - sum(diag(confusion)) / sum(confusion)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
lda_test = predict(lda_train, plasma_data_scaled[-train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
## QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
dim(plasma_data_scaled)
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
## Fit logistic regression model to training data:
train_set = c(1:16, 17:32)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
## Fit logistic regression model to training data:
train_set = c(1:16, 17:32)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
train_set = c(1:16, 17:32)
train_set
## Fit logistic regression model to training data:
train_set = c(1:16)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
library(MASS)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## Fit logistic regression model to training data:
train_set = c(1:16)
red_lr_train = glm(y ~ fibrinogen, data=plasma_data_scaled[train_set,], family="binomial")
## Compute fitted values for the validation data (not training data)
phat_test = predict(red_lr_train, data=plasma_data_scaled[-train_set,], type="response")
yhat_test = ifelse(phat_test > 0.5, 1, 0)
# Find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
plasma_data_scaled[train_set,]
train_set = c(1:16)
train_set
plasma_data_scaled[train_set,]
nrow(plasma_data_scaled[train_set,])
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
lda_train = lda(y~fibrinogen, data=plasma_data_scaled)
plasma_data_scaled[train_set,]
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[-train_set,])
## find values for the testrat data
lda_test = predict(lda_train, plasma_data_scaled[train_set,])
yhat_test = lda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[1:16,])
plasma_data_scaled[1:16,]
nrow(plasma_data_scaled[1:16,])
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## QDA analysis
## Fit train data
qda_train = qda(y~fibrinogen, data=plasma_data_scaled[train_set,])
## find values for the test data
qda_test = predict(qda_train, plasma_data_scaled[-train_set,])
yhat_test = qda_test$class
## find test error
1 - mean(plasma_data_scaled$y[-train_set] == yhat_test)
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
library(MASS)
# LDA analysis
## Fit train data
lda_train = lda(y~fibrinogen, data=plasma_data_scaled[train_set,])
?seq
3:5 == 1:8
c(1:13, 27:29)
plasma_data_scaled[c(1:13, 27:29),]
plasma_data = data.frame(plasma[,1:2], ESR = as.integer(plasma$ESR)-1)
y = plasma_data[,3]
## Extract predictors
X1_raw =  plasma_data[,1:2]
## Standarise (scale) predictors
X1 = scale(as.matrix(X1_raw))
## Form scaled data frame
plasma_data_scaled = data.frame(y, X1)
plasma_data_scaled[c(1:13, 27:29),]
plasma_data_scaled[-c(1:13, 27:29),]
nrow(plasma_data_scaled[-c(1:13, 27:29),])
nrow(plasma_data_scaled[c(1:13, 27:29),])
knitr::opts_chunk$set(echo = TRUE)
library(nclSLR)
library(MASS)
## Fit and summarise model, use binomial for logistical regression
lr_fit = glm(y ~ ., data=plasma_data_scaled, family="binomial")
summary(lr_fit)
lr_fit_red$coefficients
## Load the data:
data(plasma)
## Create new column of 0s and 1s
plasma_data = data.frame(plasma[,1:2], ESR = as.integer(plasma$ESR)-1)
head(plasma_data)
setwd("C:/Users/Ammar Hasan/OneDrive/Data Science MSc/Data Management/csc8631_project")
library(ProjectTemplate)
project.load()
load.project()
test.project()
knitr::opts_chunk$set(echo = TRUE, warning=FALSE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
# call ggplot
ggplot(progressTypeDf, aes(archetype)) +
geom_histogram(stat='count', fill = 'Light Blue')
# call ggplot
ggplot(progressTypeDf, aes(archetype)) +
geom_bar(stat='count', fill = 'Light Blue')
# call ggplot
ggplot(progressTypeDf, aes(archetype)) +
geom_bar(fill = 'Light Blue')
# Subset unspecified out this time
ggplot(subset(progressTypeDf, archetype !='Unspecified'), aes(archetype)) +
geom_histogram(stat='count', fill = 'Light Blue')
# gather data to plot each variable individually, function
# for later use
gatherProgress = function(df) {
return(gather(df, Variable, Value, -c(learner_id, archetype)))
}
# plotting with ggplot, use function for later use
boxplotGathered = function(df){
# plot with ggplot, flip to fit variable names
ggplot(df, aes(x = Variable, y = Value)) +
geom_boxplot() +
coord_flip() +
theme_light()
}
boxplotGathered(gatherProgress(progressTypeDf))
p3 = g +
geom_boxplot(aes(archetype, week3_completed_steps)) +
coord_flip()
